<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[horimisli.me]]></title>
        <description><![CDATA[horimisli.me]]></description>
        <link>https://horimisli.me</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 16 Apr 2021 16:46:30 GMT</lastBuildDate>
        <atom:link href="https://horimisli.me/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[gcloud alpha logging tail しようとしたら "Please ensure the grpc module is installed" と怒られる]]></title>
            <description><![CDATA[<p>google-cloud-sdk の alpha 版にはログを <code>tail -f</code> 感覚でストリーミングできる機能があって便利。 以下の手順でこの機能をアクティベートできる。</p>
<hr>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown"># alpha componentを有効化
gcloud components install alpha
# streamingにgRPCを使っているようなのでパッケージを入れる
pip install grpcio
# ログを表示する
gcloud alpha logging tail --format=json &#x26;#39;labels.k8s-pod/app=&#x26;quot;my-app-deployment&#x26;quot;&#x26;#39;</code></pre></div>
<p>しかし Python パッケージのインストールがうまく認識されず以下のようなエラーで悩まされた。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">ERROR: (gcloud.alpha.logging.tail) Please ensure the grpc module is installed.  Run:
pip install grpcio</code></pre></div>
<p>まず google-cloud-sdk が想定してる Python バイナリ(pip) を参照しているか怪しかったので確認。以下の環境変数を確認するといいらしい。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">echo $CLOUDSDK_PYTHON</code></pre></div>
<p>確かに想定通りのパスにある pip を使っているようだったので、さらに悩む。<br>
ドキュメントを見返してみると以下の環境変数も設定が必要らしく、指示通りに export したらパッケージが認識されるようになった。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">export CLOUDSDK_PYTHON_SITEPACKAGES=1</code></pre></div>
<blockquote>
<p><strong>Note:</strong> By default, the Cloud SDK ignores Python libraries installed on your local system. To allow the Cloud SDK to use the <strong>grpcio</strong> library, you need to enable site packages. To enable site packages, set the <strong>CLOUDSDK_PYTHON_SITEPACKAGES</strong> environment variable to <strong>1</strong>. With site packages enabled, the Cloud SDK can use extra libraries outside of the <strong>google-cloud-sdk/lib</strong> directory.</p>
<p><a href="https://cloud.google.com/logging/docs/reference/tools/gcloud-logging#live-tailing">Command-line interface  |  Cloud Logging  |  Google Cloud</a></p>
</blockquote>
<p>これもエラーメッセージに出してほしいところだけど、公式ドキュメントをちゃんと読みましょうという話でした。</p>
]]></description>
            <link>https://horimisli.me/entry/2021-01-26-gcloud-alpha-pip-error</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2021-01-26-gcloud-alpha-pip-error</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Tue, 26 Jan 2021 01:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[dart:htmlのsetInnerHtmlでタグを追加する]]></title>
            <description><![CDATA[<p>dart:html では以下のようなコードで HTML 要素を追加できる。</p>
<div class="remark-highlight"><pre class="language-dart"><code class="language-dart"><span class="token keyword">import</span> dart<span class="token punctuation">:</span>html

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setInnerHtml</span><span class="token punctuation">(</span><span class="token string">'&#x3C;a href="https://twitter.com/horimislime">'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>しかしこのコードだと以下のようなログが出力されタグが消されてしまう。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">Removing disallowed attribute &#x26;lt;A href=&#x26;quot;https://twitter.com/horimislime&#x26;quot;&#x26;gt;</code></pre></div>
<p>対処法としては <code>setInnerHtml</code> の引数に指定できる <code>NodeValidator</code> で該当のタグを許可リストに含める必要がある。<br>
a タグのように src でリンク先を指定する場合は <code>UrlPolicy</code> の設定も必要。デフォルトでは same origin 以外へのリンクは許可されておらず、バリデーションで要素が消されてしまう。</p>
<p><a href="https://api.dart.dev/stable/2.5.0/dart-html/UriPolicy/UriPolicy.html">UriPolicy constructor - UriPolicy class - dart:html library - Dart API</a></p>
<p>静的なリンクを貼りたい場合 URL のバリデーションも不要なので、以下のような実装をすればいい。</p>
<div class="remark-highlight"><pre class="language-dart"><code class="language-dart"><span class="token keyword">import</span> dart<span class="token punctuation">:</span>html

<span class="token keyword">class</span> <span class="token class-name">CustomUriPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">UriPolicy</span> <span class="token punctuation">{</span>
  <span class="token metadata symbol">@override</span>
  bool <span class="token function">allowsUri</span><span class="token punctuation">(</span>String uri<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> NodeValidatorBuilder htmlValidator <span class="token operator">=</span> NodeValidatorBuilder
  <span class="token punctuation">.</span><span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">allowElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>
      attributes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      uriPolicy<span class="token punctuation">:</span> <span class="token function">CustomUriPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">allowElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span> 
      attributes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
      uriPolicy<span class="token punctuation">:</span> <span class="token function">CustomUriPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setInnerHtml</span><span class="token punctuation">(</span><span class="token string">'&#x3C;a href="https://twitter.com/horimislime">'</span><span class="token punctuation">,</span> validator<span class="token punctuation">:</span> htmlValidator<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>デフォルトだと結構制約が厳しく多くのタグがバリデーションに引っかかるので、色々設定する必要があった。</p>
]]></description>
            <link>https://horimisli.me/entry/2021-01-25-dart-html-disallowed-attributes</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2021-01-25-dart-html-disallowed-attributes</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Mon, 25 Jan 2021 01:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bear 上で管理しているノートの数を集計する]]></title>
            <description><![CDATA[<p><a href="https://bear.app">Bear.app</a> の UI 上では記事数が表示されていないので、以下のコマンドを叩く。</p>
<div class="remark-highlight"><pre class="language-sh"><code class="language-sh">sqlite3 ~/Library/Group\ Containers/9K33E3U3T4.net.shinyfrog.bear/Application\ Data/database.sqlite &#x26;quot;SELECT COUNT(*) FROM ZSFNOTE;&#x26;quot;

676</code></pre></div>
<p>Bear のローカルDB については以下の公式記事で説明されていた。</p>
<blockquote>
<p>Bear’s macOS database is located here:
~/Library/Group Containers/9K33E3U3T4.net.shinyfrog.bear/Application Data/database.sqlite
<a href="https://bear.app/faq/Where%20are%20Bear&#x27;s%20notes%20located/">Where are Bear’s notes located | FAQ and Support | Bear App</a></p>
</blockquote>
<p>記事は <code>ZFNOTE</code> テーブルに入っていて、カラムを見た感じ <code>WHERE ZTRASHED=0 AND ZARCHIVED=0</code> とか条件を書けばアーカイブや削除してない記事だけを抽出できそう。</p>
]]></description>
            <link>https://horimisli.me/entry/2021-01-23-bear-note-entry-count</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2021-01-23-bear-note-entry-count</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Sat, 23 Jan 2021 01:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Cloud Logging のログをエクスポートして BigQuery テーブルに手動インポートする方法]]></title>
            <description><![CDATA[<p><a href="https://horimisli.me/entry/log-router-trouble-shooting/">GCP の Cloud Logging から BigQuery へのログエクスポートがうまくいかないときに確認すること</a> という記事を書いた。こういうケースでうまく取り込みができてなかったログを手動でインポートしたいとき、やや手順が多いので何をすればいいかまとめる。</p>
<h1>Cloud Loggingからログをエクスポートする</h1>
<p>まずは該当のログをエクスポートするところから。</p>
<p>Cloud Console からも簡単に書き出せるが、ログの件数が最大 300 件（現時点でプレビュー版の新しいログビューアでは 1 万件）という制限がある。また書き出した内容を少し加工した方がインポート時に都合がいいので（理由は後述）、 google-cloud-sdk を用いてコマンドラインから書き出すのがおすすめ。</p>
<p><img src="/images/8B49BCC9-8DB5-49CA-B1E1-2F3F87B1587F.jpg" alt="Cloud Console のログビューワ。ベータ版の UI だと最大１万件まで書き出し可能"></p>
<p>gcloud コマンドでログを書き出す方法はこのようになる。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">gcloud logging read --project=PROJECT_NAME --freshness=7d --format=json &#x26;#39;(
resource.type=&#x26;quot;k8s_container&#x26;quot;
resource.labels.cluster_name=&#x26;quot;MY_CLUSTER_NAME&#x26;quot;
resource.labels.namespace_name=&#x26;quot;default&#x26;quot;
resource.labels.container_name=&#x26;quot;MY_CONTAINER_NAME&#x26;quot;
receiveTimestamp&#x26;gt;=&#x26;quot;2020-12-11T15:00:00&#x26;quot;
receiveTimestamp&#x26;lt;=&#x26;quot;2020-12-13T08:30:00&#x26;quot;
)&#x26;#39; | jq -c &#x26;#39;.[]&#x26;#39; &#x26;gt; log_export.ndjson</code></pre></div>
<p>ポイントは</p>
<ul>
<li>古いログを読み込む場合は忘れず <code>—freshness</code> を指定する。デフォルトは 1d になっていて、2 日以上前のログは読み込まれないので注意</li>
<li>後述する BigQuery へのインポート時に ndjson 形式だと便利なので、 jq で加工する（これがコマンドラインをオススメする理由）</li>
</ul>
<h1>BigQueryへのログファイルのインポート</h1>
<p>ログファイルから BigQuery へのインポートは bq コマンドを使う。<br>
<a href="https://cloud.google.com/bigquery/docs/loading-data-local?hl=ja#bq">データをローカル データソースから読み込む  |  BigQuery  |  Google Cloud</a></p>
<p>インポート前にあらかじめテーブルのスキーマを書き出す。これも bq コマンドで行える。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">bq show --project_id=project-name --schema --format=prettyjson dataset_name.table_name &#x26;gt; schema.json</code></pre></div>
<p>BigQuery テーブルのカラム名には英数字とアンダースコアしか使えないが、 Kubernetes container のログをエクスポートすると json キーに <code>k8s-pod/app</code> といったような文字列が含まれていたりする。これをそのままインポートすると以下のようにエラーが出るので、地道に <code>k8s_pod_app</code> といったように文字列置換をする。 Sink を使った BigQuery へのログエクスポートだとこれを暗黙的にやってるみたい。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">Error in query string: Error processing job &#x26;#39;project-name:bqjob_...&#x26;#39;: Invalid field name &#x26;quot;k8s-pod/job-name&#x26;quot;. 
Fields must contain only letters, numbers, and underscores, start with a letter or underscore, and be at most 128 characters long. Table:
stdout_8c81f8db_f768_4e20_bb30_6045b86e9cca_source</code></pre></div>
<p>ログファイル内のキー名を修正したら、以下のコマンドでインポート。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">bq load --source_format=NEWLINE_DELIMITED_JSON project_name:dataset_name.table_name ./log_export.ndjson ./schema.json</code></pre></div>
<p>以上が手動インポートの流れ。地味に手順が多かったのでメモまでに。</p>
]]></description>
            <link>https://horimisli.me/entry/2020-12-26-import-cloud-logging-manually</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2020-12-26-import-cloud-logging-manually</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Sat, 26 Dec 2020 14:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[GCP の Cloud Logging から BigQuery へのログエクスポートがうまくいかないときに確認すること]]></title>
            <description><![CDATA[<p>Cloud Logging のログを長期保存や分析目的で BigQuery に転送したいケースがある。これは Log Router の Sink を設定することで簡単に実現できる。
しかし最近転送がうまく動かなくなりハマったので調査と対応手順をまとめる。</p>
<h1>問題の切り分け</h1>
<p>公式ドキュメントにもあるが、Sink がうまく動かない原因はおおまかに 3 パターンある。<br>
<a href="https://cloud.google.com/logging/docs/export/configure_export_v2#troubleshooting">Google Cloud Console でのログのエクスポート  |  Cloud Logging</a></p>
<ol>
<li>Sink に設定したログのフィルタが間違っている</li>
<li>Sink を設定して以降に新規のログが Cloud Logging に流れてきていない</li>
<li>Sink からデータ転送先への書き込みが失敗している</li>
</ol>
<p>1. と 2. は初歩的な問題なのですぐ気付けるはず。3. に関しては色々な可能性がありそうだが、 <a href="https://console.cloud.google.com/logs/metrics">https://console.cloud.google.com/logs/metrics</a> の <code>exports/error_count</code> 指標を見ればエラーが発生しているか確認できる。</p>
<p>自分が遭遇したのは Sink から宛先テーブルへの書き込み権限が無くなっていたというものだった。
Sink から BigQuery テーブルへ書き込む場合、テーブルのデータ編集者権限で Sink に紐づいた Service Account  <code>gcp-sa-logging.iam.gserviceaccount.com</code> ドメインのキーが登録されている必要がある。</p>
<p><img src="/images/7E2FD8D1-F4AD-45B0-AF06-F9B7D0E3EFC6.png"></p>
<p>自分の場合、最初に Sink を設定して BigQuery にデータを転送し始めた後、諸事情で dataset を削除して作り直した際 Service Account の設定が漏れていたらしい。
この問題が起こった時の対応手順は以下の通り。</p>
<h1>Sink の Service Account をテーブル編集権限に追加</h1>
<p>そもそも Web の Cloud Console 上では、各 Sink の設定ページに Service Account という項目は存在しない。なのでこれを宛先に登録する必要があるということに気づきにくかった。</p>
<p>各 Sink の Service Account は <code>gcloud</code> コマンドから確認できる。<br>
<a href="https://cloud.google.com/logging/docs/reference/tools/gcloud-logging#listing_or_describing_sinks">Command-line interface  |  Cloud Logging  |  Google Cloud</a></p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown"># Sink の一覧を確認する
gcloud logging sinks list
NAME              DESTINATION                                                  FILTER
log_export_sink   bigquery.googleapis.com/projects/my-app/datasets/log_export  resource.type=&#x26;quot;k8s_container&#x26;quot;
                                                                               resource.labels.cluster_name=&#x26;quot;my-app-cluster&#x26;quot;
...</code></pre></div>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown"># Sink 名を指定して詳細を表示
gcloud logging sinks describe log_export_sink 
bigqueryOptions:
  usePartitionedTables: true
  usesTimestampColumnPartitioning: true
...
updateTime: &#x26;#39;2020-11-30T02:46:33.462601605Z&#x26;#39;
writerIdentity: serviceAccount:*********@gcp-sa-logging.iam.gserviceaccount.com</code></pre></div>
<p>確認した Service Account を宛先テーブルに登録し、無事ログがエクスポートできた。</p>
]]></description>
            <link>https://horimisli.me/entry/2020-12-20-log-router-trouble-shooting</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2020-12-20-log-router-trouble-shooting</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Sun, 20 Dec 2020 14:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[年賀状印刷環境をはがきデザインキットから移行]]></title>
            <description><![CDATA[<p><a href="https://internet.watch.impress.co.jp/docs/yajiuma/1227653.html">日本郵便の年賀状作成ツール「はがきデザインキット」、実質的にサービス終了へ【やじうまWatch】 - INTERNET Watch</a></p>
<p>長らくお世話になっていたはがきデザインキットがサービス終了になってしまったので、今年は新しい移行先を探すことにした。</p>
<p>このサービスと同様に裏面デザイン作成・宛名印刷までができるサービスはいくつかある。しかしアプリケーションの UX があまりに厳しすぎたり、年に一度しか使わないのに年間サブスクリプションを強いられたり、ざっと調べただけでも厳しい感じがした。</p>
<p>最終的にビックカメラが提供している印刷サービスが無難そうに思えてきたので使うことにした。いくつか提携先の印刷業者を選べるが、自分は印刷さえできれば良かったので富士フィルムを選択。</p>
<p><a href="https://www.biccamera.co.jp/service/store/photo/nenga/index.html">年賀状　2021 | ビックカメラの写真サービス</a></p>
<p>Web の UI はまぁ我慢できるレベルで、自前デザインアップロード・裏面と宛名の印刷まで完結したので文句なし。はがきデザインキットのサービス終了前に住所録（CSV）をエクスポートしていた人は、それをそのままインポートして住所録が作成できるのもよかった。</p>
<p><img src="/images/08F85A2D-BFB6-40FE-BE81-2B48ECA37EA0.png"></p>
<p>印刷したものは店頭で支払いして受け取り、という点だけがちょっと面倒ではある。はがきデザインキットは印刷から投函まで全て任せられるのが素晴らしかった。</p>
<p>値段的にはこれが安いのかは分からないけど、サービスの使い勝手と値段のバランスを見ながら調査するのが労力に見合わないと思ってやめた。大手のサービスだから当面は潰れないだろうし、もう考えるのをやめて毎年使っていく。</p>
]]></description>
            <link>https://horimisli.me/entry/2020-12-06-printing-nengajyo</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2020-12-06-printing-nengajyo</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Sun, 06 Dec 2020 14:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[macOS Big Sur で kernelmanagerd が CPU リソースを食いまくる問題]]></title>
            <description><![CDATA[<p>Big Sur にアップデートして以降、 <code>kernelmanagerd</code> というプロセスが常に CPU を食っていて困っていた。</p>
<p>自分の環境では 2 つの原因があって対処した。</p>
<h1>Sophos Home をアンインストールする</h1>
<p>何箇所かのコミュニティで投稿されているが、Sophos が悪さをしているケースがあるらしい。</p>
<p><a href="https://discussions.apple.com/thread/252033284">kernelmanagerd process causing high cpu u… - Apple Community</a></p>
<p>Sophos の公式サイトでは Big Sur 対応について色々書いてるが、CPU 負荷については何も言及されてなく、クライアントを最新にしても解決しなかったのでアンインストールした。
<a href="https://support.home.sophos.com/hc/en-us/articles/360051251412-Support-for-macOS-11-Big-Sur-#h_01EPSHX55G7MYWEADFQTX0KC24">Support for macOS 11- Big Sur  – Sophos Home Help</a></p>
<h1>Karabiner Elementsのバージョンを確認する</h1>
<p>Sophos を消してもまだ 40％前後 <code>kernelmanagerd</code> に CPU リソースが取られていて困った。Twitter を見ていると Karabiner が原因っぽい発言を見かけたのでアンインストールしてみたところ解決。</p>
<p>どうも Catalina から deprecated になった kernel extension を使っている古い Karabiner だと再現するようだった。v13.0.0 以降では DriverKit という新しい仕組みに置き換わって Big Sur 対応が明記されている。</p>
<p><a href="https://github.com/pqrs-org/Karabiner-Elements/releases">Releases · pqrs-org/Karabiner-Elements · GitHub</a> </p>
<p>自分はそもそも使ってないのに動いてたから消したけど、必要な場合はアップデートすれば解決しそう。</p>
<p>これでようやく CPU 負荷が落ち着いた。</p>
<h1>それでも直らない場合</h1>
<p>3rd party アプリの Kernel extension が問題になることが分かったので、負荷で困っている場合は以下のコマンドで不要なものが動いてないか、ソフトウェアアップデート可能なものがないか確認する。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">kextstat | grep -v com.apple</code></pre></div>
]]></description>
            <link>https://horimisli.me/entry/2020-11-29-big-sur-kernelmanagerd-problem</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2020-11-29-big-sur-kernelmanagerd-problem</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Sun, 29 Nov 2020 13:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Macの自動時刻設定は割とズレる]]></title>
            <description><![CDATA[<p>とある株為替取引ツールを使っていたら、Mac の時計が日本標準時からズレているとの警告が表示されるようになった。時刻設定は自動設定にしておけばマシン再起動時に同期してくれると思ってたけど、調べたら似たトラブルが多いようだった。</p>
<h1>時刻がズレていないか確認する</h1>
<p><a href="http://www.nict.go.jp/JST/JST5.html">JST Clock</a> をみると JST の正しい現在時刻と端末の時刻を比較できる。調べてみると 6 秒ほど時刻が遅れていた。</p>
<h1>Macの標準時刻設定</h1>
<p><a href="https://support.apple.com/ja-jp/HT203413">Mac で日付や時刻が間違っている場合 - Apple サポート</a></p>
<p>Mac の自動時刻設定は NTP サーバ <code>time.asia.apple.com</code> を参照して行っている。どうもここを参照したままだとズレが治らなかったので、参照先を NICT が提供しているものに変更した。</p>
<h1>NICTの提供するNTPサーバから時刻を取得する</h1>
<p>そもそも NTP サーバってどこを参照するのが正解なのかと疑問に思ったけど、少なくとも <a href="http://jjy.nict.go.jp/tsp/PubNtp/index.html">日本標準時(JST)グループ</a> が提供する NICT のサーバを参照すれば問題なさそうだった。</p>
<p>参照先を変えるために <code>/etc/ntp.conf</code> を編集した。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">server ntp.nict.jp iburst</code></pre></div>
<p><code>iburst</code> の指定は optional で、ntpd 起動後に初回同期するまでの時間を 64s から 2s に短縮してくれるものらしい。</p>
<p>参考：</p>
<ul>
<li><a href="https://lowreal.net/2014/12/03/2">Mac の時計がずれるので ntp.conf いじってみる | tech - 氾濫原</a></li>
<li><a href="https://access.redhat.com/documentation/ja-jp/red_hat_enterprise_linux/7/html/system_administrators_guide/s1-configure_ntp#s2_Configuring_the_iburst_Option">19.17. NTP の設定 Red Hat Enterprise Linux 7 | Red Hat Customer Portal</a></li>
</ul>
<h1>結果</h1>
<p>改めて JST Clock で正常になったか確認した。</p>
<table>
<thead>
<tr>
<th>Before</th>
<th>After</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="/images/ntp-mac-before.png" alt="AppleのNTPサーバを参照している時"></td>
<td><img src="/images/ntp-mac-after.png" alt="NICTのNTPサーバを参照した結果"></td>
</tr>
</tbody>
</table>
]]></description>
            <link>https://horimisli.me/entry/2020-10-11-ntp-mac</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2020-10-11-ntp-mac</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Sun, 11 Oct 2020 13:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Jekyll を使ったブログのプレビューと CI を Docker 上で行う]]></title>
            <description><![CDATA[<p>このブログで新しい記事を作成する際の preview サーバ起動や CI 上での記事コンパイルを Docker 上で行えるようにした。</p>
<p>image は <a href="https://github.com/envygeeks/jekyll-docker">envygeeks/jekyll-docker</a> を使用。以下のような <code>docker-compose.yml</code> を blog ディレクトリ直下に用意してローカルプレビューできるようにしてる。</p>
<div class="remark-highlight"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">jekyll-build</span><span class="token punctuation">:</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> jekyll serve <span class="token punctuation">-</span><span class="token punctuation">-</span>incremental <span class="token punctuation">-</span><span class="token punctuation">-</span>future <span class="token punctuation">-</span><span class="token punctuation">-</span>unpublished <span class="token punctuation">-</span><span class="token punctuation">-</span>watch <span class="token punctuation">-</span><span class="token punctuation">-</span>force_polling <span class="token punctuation">-</span><span class="token punctuation">-</span>livereload
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Tokyo
    <span class="token key atrule">image</span><span class="token punctuation">:</span> jekyll/minimal
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 4100<span class="token punctuation">:</span><span class="token number">4000</span>
      <span class="token punctuation">-</span> 35729<span class="token punctuation">:</span><span class="token number">35729</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> $PWD<span class="token punctuation">:</span>/srv/jekyll
</code></pre></div>
<p>CI (GitHub Actions) 上では以下のコマンドで本番用にサイトをコンパイルし HTML ファイルを生成する。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">docker-compose run -e JEKYLL_ENV=production -e JEKYLL_UID=1001 -e JEKYLL_GID=116 --rm jekyll-build jekyll build</code></pre></div>
<p>コンパイルした HTML ファイルはマウントしたホストディレクトリ側 (GitHub Actions 上）に書き出されるため、UID/GID を適切に設定しないと書き込み権限エラーが発生する。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">/usr/local/lib/ruby/2.7.0/fileutils.rb:250:in `mkdir&#x26;#39;: Permission denied @ dir_s_mkdir - /srv/jekyll/.jekyll-cache (Errno::EACCES)</code></pre></div>
<p><code>id</code> コマンドを叩いて GitHub Actions 上にファイル作成する際必要な UID/GID を確認する。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown"># Run id
uid=1001(runner) gid=116(docker) groups=116(docker),4(adm),101(systemd-journal)</code></pre></div>
<p>jekyll-docker は README にもあるように、<code>JEKYLL_UID</code> と <code>JEKYLL_GID</code>（それぞれ初期値 1000）2 つの環境変数の値でユーザ作成とファイル書き込みをしている。
CI で実行する際はここで確認した UID/GID をセットしておく。<br>
<a href="https://github.com/envygeeks/jekyll-docker#configuration">https://github.com/envygeeks/jekyll-docker#configuration</a></p>
]]></description>
            <link>https://horimisli.me/entry/2020-09-28-jekyll-on-docker</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2020-09-28-jekyll-on-docker</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Mon, 28 Sep 2020 11:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[SIGMA fp を一週間レンタルした]]></title>
            <description><![CDATA[<p><img src="/images/DSCF7728.jpg"></p>
<p><a href="https://goopass.jp/">カメラレンタルのGooPass</a> にお試しで課金して、前から気になっていた SIGMA fp を 1 週間ほど試した。</p>
<p>5 年以上使ってきた Fujifilm X100T の買い替え先候補として試したんだけど、使っていてとても楽しい機材だった。</p>
<p>Fuji のコンデジユーザ視点も交えた良かった点。</p>
<ul>
<li>フルサイズだけど十分軽い（キットレンズなら、だけど）。大体 Fujifilm X-T2 に XF35mm F1.4 を付けてるくらいの重さかな？ 嵩張り具合的もウェストポーチに収まるレベルなので扱いやすく、これならフルサイズに行っても…という気持ちになった</li>
<li>ティール&#x26;オレンジの色がおしゃれ。撮って出し JPEG の満足度がとても高いので、フィルムシミュレーションから離れられないという Fuji ユーザでも満足できそう</li>
<li>シネスコ撮影するだけでエモい絵が撮れる。構図の取り方も普段と違うので新鮮な気持ちで楽しめた</li>
</ul>
<p>特にシネスコは本当に楽しくて、比率を変えるだけで撮影体験ってこんなに変わるんだなと感動した。これはある程度じっくり撮影しないと得られない感想だった。</p>
<p><img src="/images/FP00018.jpg"></p>
<p><img src="/images/FP00037.jpg"></p>
<p><img src="/images/FP00012.jpg"></p>
<p><img src="/images/FP00060.jpg"></p>
<p>ここまではまぁカタログ見れば分かりそうな感想だけど、一定時間使ってみて気づいたデメリットも幾つかあった。</p>
<ul>
<li>見た目通りなんだけどグリップ感が全くない。引っ掛かりがない上にそこそこ重いので、片手で持ってると疲れるし、落しそうな不安が常にあった</li>
<li>軍艦部のダイアルの少なさ。慣れもありそうだけど、やっぱり ISO や SS をダイヤルで調節できる Fuji のカメラは便利</li>
<li>電源スイッチが筐体左側にあるのは使いにくい。自分は右手でスッと取り出し電源を入れて素早くスナップ、という使い方が多いんだけど、それができないのはかなり不便</li>
<li>起動時間が結構遅い。5 年落ちの X100T が 0.5 秒で起動するのに対し fp は 1 秒以上待たされるので、前述のようなスナップ用途ではもどかしさがあった</li>
</ul>
<p><img src="/images/DSCF0166.JPG"></p>
<p>結局主に予算的な都合で fp を買うのは見送ったけど、 1 週間使ってみて大勢の人が fp を絶賛することに納得がいった。</p>
<p>余談だけど Goo Pass でのレンタル体験も素晴らしかった。梱包がすごく工夫されていて、返送時は同梱の梱包材に機材を包んでガムテープなしで箱を封できるようになっている。借り放題サービスのペインポイントがしっかり解決されていて、fp を返却した後も Sony α7 や Fuji の X マウントレンズを借りたりとサービスを満喫した。一旦目的の機材は一通り試して解約したけど、また機会があったら使いたい。</p>
]]></description>
            <link>https://horimisli.me/entry/2020-09-20-SIGMAfp</link>
            <guid isPermaLink="true">https://horimisli.me/entry/2020-09-20-SIGMAfp</guid>
            <dc:creator><![CDATA[horimislime]]></dc:creator>
            <pubDate>Sun, 20 Sep 2020 09:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>